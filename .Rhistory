demo()
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4
y <- 2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x >= 10] <- 4
x
x[x >= 11] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
getwd()
hw1_data <- read.csv("~/code/coursera/datasciencecoursera/hw1_data.csv")
View(hw1_data)
good <- complete.cases(hw1_data)
View(good)
good[good == T]
sum(good[good == T])
View(hw1_data)
hw1_data
sum(hw1_data[,1].is(NA))
sum(hw1_data[,1]==NA)
sum(hw1_data[,1])
hw1_data[,1]
isNA(hw1_data[,1])
bad <- is.na(hw1_data[,1])
bad
sum(bad[bad==T])
hw1_data - bad
hw1_data[!bad]
hw1_data[[,1]!bad]
good <- complete.cases(hw1_data[,1])
good
hw1_data[,1]
hw1_data[,1][good]
mean(hw1_data[,1][good])
ozone31 <- hw1_data[,1][hw1_data > 31]
ozone31
ozone <- hw1_data[,1]
ozone
ozone31 <- ozone[ozone > 31]
ozone31
newdata <- hw1_data[ which(hw1_data$Ozone > 31 & hw1_data$Temp > 90), ]
mean(newdata[,2])
newdata <- hw1_data[ which(hw1_data$Month == 6), ]
mean(newdata[,4])
newdata <- hw1_data[ which(hw1_data$Month == ), ]
newdata <- hw1_data[ which(hw1_data$Month == 5), ]
max(newdata[,1])
newdata
max(newdata[,1])
newdata <- hw1_data[ which(hw1_data$Ozone != NA & hw1_data$Month == 5), ]
newdata
newdata <- hw1_data[ which(hw1_data$Month == 5), ]
newdata
good <- complete.cases(newdata[,1])
good
max(newdata[,1][good])
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y<-x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
bye
bye()
setwd("~/code/coursera/ProgrammingAssignment2")
library("cachematrix.R)
source("cachematrix.R")
matrix(data = c(1:9), nrow = 3, ncol = 3, byrow = FALSE,
dimnames = NULL)
test <- matrix(data = c(1:9), nrow = 3, ncol = 3, byrow = FALSE,
dimnames = NULL)
test
makeCacheMatrix(test)
cachedtest <- makeCacheMatrix(test)
cachedtest$get()
cachedtest$getMatrixCached()
cacheSolve(cachedtest)
?solve
solve(cachedtest)
is.matrix(cachedtest)
is.matrix(test)
solve(test)
test[3,3] <- 5
test
solve(test)
cachedtest <- makeCacheMatrix(test)
cachedtest$get()
cachedtest$getMatrixCached()
cacheSolve(cachedtest)
cacheSolve(cachedtest)
cacheSolve(cachedtest)
cachedtest <- makeCacheMatrix(cashedtest)
cacheSolve(cachedtest)
cachedtest <- makeCacheMatrix(test)
cacheSolve(cachedtest)
test <- solve(test)
test
cachedtest <- makeCacheMatrix(test)
cacheSolve(cachedtest)
